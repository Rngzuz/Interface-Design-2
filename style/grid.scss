@import "variables.scss";

@function createName($prefix: null, $name: null, $index: null) {
        @return "." + 
                if($prefix, $prefix, "") + 
                if($name, "-" + $name, "") + 
                if($index, "-" + $index, "");
}

//Make specific sized flex columns
@mixin flexColumns($columns, $prefix: null, $name: null, $gutter: null) {
    $colClasses: (
        createName($prefix, $name + "-grow"),
        createName($prefix, $name + "-shrink")
    );

    #{nth($colClasses, 1)} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
    }

    #{nth($colClasses, 2)} {
        flex-basis: 0;
        flex-grow: 0;
        flex-shrink: 1;
    }

    @for $index from 1 through $columns {
        $width: 100%/$columns*$index;
        $colClass: createName($prefix, $name, $index);

        #{$colClass} {
            flex: 0 0 $width;
            max-width: $width;
        }

        $colClasses: append($colClasses, $colClass, "comma");
    }

    @if $gutter {
        #{$colClasses} {
            padding-right: $gutter;
            padding-left: $gutter;
        }
    }
}

//Make flex utilities e.g. centering children
@mixin flexUtils($name: null) {
    //Properties which is commented out is the default values
    $flexProperties: (
        flex: (
            flex-direction: (
                row: "row",
                row-reverse: "row-reverse",
                col: "column",
                col-reverse: "column-reverse"
            ),
            flex-wrap: (
                nowrap: "nowrap",
                wrap: "wrap", //This is not the default, but .row has flex-wrap: wrap
                wrap-reverse: "wrap-reverse"
            )
        ),
        flex-justify: (
            justify-content: (
                start: "flex-start",
                end: "flex-end",
                center: "center",
                between: "space-between",
                around: "space-around"
            )
        ),
        flex-self: (
            align-self: (
                auto: "auto",
                start: "flex-start",
                end: "flex-end",
                center: "center",
                baseline: "baseline",
                stretch: "stretch"
            )
        ),
        flex-items: (
            align-items: (
                start: "flex-start",
                end: "flex-end",
                center: "center",
                baseline: "baseline",
                stretch: "stretch"
            )
        ),
        flex-content: (
            align-content: (
                start: "flex-start",
                end: "flex-end",
                center: "center",
                between: "space-between",
                around: "space-around",
                stretch: "stretch"
            )
        )
    );

    @each $className, $propertyMap in $flexProperties {
        @each $propertyName, $propertyValues in $propertyMap {
            @each $key, $value in $propertyValues {
                $cssClass: createName($className, $key, $name);

                #{$cssClass} {
                    #{$propertyName}: #{$value};
                }
            }
        }
    }
}

@mixin gridSpace($name) {
    .space-#{$name} {
        padding-bottom: 2 * $gutter;
    }

    .x2-space-#{$name} {
        padding-bottom: 2 * (2 * $gutter);
    }

    .nospace-#{$name} {
        padding-bottom: 0;
    }

    .nogutter-#{$name} {
        padding: 0;
    }
    .row.nogutter-#{$name} > [class*="#{$prefix}"] {
        padding: 0;
    }
}

.container {
    min-width: $breakpoint0;
    padding: (2 * $gutter);
    margin-right: auto;
    margin-left: auto;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 (-$gutter);
}

ul.row {
    list-style: none;
    padding: 0;
}

//SMALL BREAKPOINT
@include flexUtils($small);
@include flexColumns($columns, $prefix, $small, $gutter);
@include gridSpace($small);

@media (max-width: $breakpoint1 - 1px) {
    .hidden-#{$small} {
        display: none;
    }

    .shown-#{$medium} {
        display: none;
    }

    .shown-#{$large} {
        display: none;
    }

    .shown-#{$xlarge} {
        display: none;
    }
}

// MEDIUM BREAKPOINT
@media (min-width: $breakpoint1) {
    .container {
        width: $breakpoint1;
    }

    @include flexUtils($medium);
    @include flexColumns($columns, $prefix, $medium, $gutter);
    @include gridSpace($medium);
}

@media (min-width: $breakpoint1) and (max-width: $breakpoint2 - 1px) {
    .hidden-#{$medium} {
        display: none;
    }

    .shown-#{$small} {
        display: none;
    }

    .shown-#{$large} {
        display: none;
    }

    .shown-#{$xlarge} {
        display: none;
    }
}

//LARGE BREAKPOINT
@media (min-width: $breakpoint2) {
    .container {
        width: $breakpoint2;
    }

    @include flexUtils($large);
    @include flexColumns($columns, $prefix, $large, $gutter);
    @include gridSpace($large);
}

@media (min-width: $breakpoint2) and (max-width: $breakpoint3 - 1px) {
    .hidden-#{$large} {
        display: none;
    }

    .shown-#{$small} {
        display: none;
    }

    .shown-#{$medium} {
        display: none;
    }

    .shown-#{$xlarge} {
        display: none;
    }
}

//XLARGE BREAKPOINT
@media (min-width: $breakpoint3) {
    .hidden-#{$xlarge} {
        display: none;
    }

    .shown-#{$small} {
        display: none;
    }

    .shown-#{$medium} {
        display: none;
    }

    .shown-#{$large} {
        display: none;
    }

    .container {
        width: $breakpoint3;
    }

    @include flexUtils($xlarge);
    @include flexColumns($columns, $prefix, $xlarge, $gutter);
    @include gridSpace($xlarge);
}